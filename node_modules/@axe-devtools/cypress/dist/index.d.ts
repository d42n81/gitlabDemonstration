/// <reference types="cypress" />
/// <reference types="cypress" />
import axe from 'axe-core';
import { AxeDevToolsResults } from '@axe-devtools/logger';
import { AxeRulesetTags, AxeDevToolsCypressAnalyzeOptions } from './types';
declare global {
    namespace Cypress {
        interface Chainable<Subject> {
            /**
             * Assertion to see if the context/window.document is accessible
             * @example
             * cy.isAxeClean()
             */
            isAxeClean(context?: axe.ElementContext, options?: axe.RunOptions): Chainable<boolean>;
            /**
             * Run and inject axe into the cypress window and iframes
             * which the user will have to configure with using setup hooks
             * @example
             * cy.axeAnalyze()
             */
            axeAnalyze(options: AxeDevToolsCypressAnalyzeOptions): Chainable<void>;
            /**
             * Set a different version of axe source by passing in the filepath to axe source
             * @example
             * cy.setAxeSource('./axe.js')
             */
            setAxeSource(axeSource?: string): Chainable<string>;
            /**
             * Set a custom ruleset file by passing the filepath
             * @example
             * cy.setAxeCustom('./axe-ruleset.json')
             */
            setAxeCustom(rulesetFile?: string): Chainable<string>;
            /**
             * Set a tag for axeAnalyze/isAxeClean (508, wcag2, wcag2.1, wcag2aaa, wcag2.1aaa, wcag2.2aaa) wcag2 is set by default
             * @example
             * cy.setAxeRuleset('508')
             */
            setAxeRuleset(tags?: AxeRulesetTags): Chainable<string>;
            /**
             * Get Results from tests after running cy.analyze()
             * @example
             * cy.getAxeResults()
             */
            getAxeResults(): Chainable<AxeDevToolsResults>;
            setAxeReportName(reportName: string): Chainable<string>;
            accessibleName(string: JQuery<HTMLElement>): Chainable<boolean>;
        }
    }
}
