"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var script_builder_1 = require("@axe-devtools/script-builder");
var analytics_1 = __importDefault(require("./analytics"));
var axe = __importStar(require("axe-core"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var table_1 = require("table");
function axeDevToolsPlugin(on) {
    // set up analytics
    var analytics = new analytics_1.default('axe-devtools-html', 'api-node-cypress');
    var trackUsage = !(process.env.AXE_TRACK_USAGE === 'false');
    var includeTestResults = process.env.AXE_INCLUDE_TEST_RESULTS === 'true';
    var distinctId = analytics.distinctId() || '';
    analytics.enableTracking(trackUsage);
    var axeVersion = axe.version;
    var axeResults = null;
    var axeReportName = '@axe-devtools-cypress';
    // build axe source
    // - either from ruleset path - or - fallback to default
    var axeDevToolsSource = (0, script_builder_1.buildAxeDevtoolsSource)({
        id: 'wcag2.1',
        enableBestPractices: false
    }).source;
    if (process.env.AXE_RULESET_PATH) {
        axeDevToolsSource = (0, script_builder_1.buildAxeDevtoolsSource)({
            rulesetFile: process.env.AXE_RULESET_PATH
        }).source;
    }
    else {
        var filepath = path.join(process.cwd(), 'axe-ruleset.json');
        if (fs.existsSync(filepath)) {
            axeDevToolsSource = (0, script_builder_1.buildAxeDevtoolsSource)({
                rulesetFile: filepath
            }).source;
        }
    }
    /**
     * tasks
     */
    var setAxeCore = function (axeSource) {
        var axeSourcePath = path.resolve(axeSource);
        try {
            axeDevToolsSource = fs.readFileSync(axeSourcePath, {
                encoding: 'utf-8'
            });
        }
        catch (error) {
            throw error;
        }
        return axeDevToolsSource;
    };
    var setAxeReportName = function (reportName) {
        axeReportName = reportName;
        return axeReportName;
    };
    var getAxeCore = function () { return axeDevToolsSource; };
    var setAxeRuleset = function (tags) {
        if (tags) {
            axeDevToolsSource = (0, script_builder_1.buildAxeDevtoolsSource)(tags).source;
        }
        return axeDevToolsSource;
    };
    var setAxeCustom = function (rulesetFile) {
        axeDevToolsSource = (0, script_builder_1.buildAxeDevtoolsSource)({ rulesetFile: rulesetFile }).source;
        return axeDevToolsSource;
    };
    var setAxeVersion = function (version) {
        var match = version.match(/(\d+\.\d+)/);
        if (!match) {
            return axeVersion;
        }
        axeVersion = match[0];
        return axeVersion;
    };
    var logViolations = function (messages) {
        var violationsOutput = {};
        if (messages.violations.length === 0) {
            return;
        }
        for (var _i = 0, _a = messages.violations; _i < _a.length; _i++) {
            var violation = _a[_i];
            if (isNaN(violationsOutput['Elements Failed']))
                violationsOutput['Elements Failed'] = 0;
            if (violation.impact === null || violation.impact === undefined) {
                continue;
            }
            if (isNaN(violationsOutput[violation.impact]))
                violationsOutput[violation.impact] = 0;
            violationsOutput['Elements Failed'] =
                violationsOutput['Elements Failed'] + violation.nodes.length;
            violationsOutput[violation.impact] =
                violationsOutput[violation.impact] + 1;
        }
        var tableHeader = new Array();
        var tableData = new Array();
        for (var _b = 0, _c = Object.entries(violationsOutput); _b < _c.length; _b++) {
            var _d = _c[_b], key = _d[0], value = _d[1];
            tableHeader.push(key);
            tableData.push(value);
        }
        var output = (0, table_1.table)([tableHeader, tableData]);
        console.log('Axe Core Version:', axeVersion);
        console.log(output);
        return true;
    };
    var setAxeResults = function (value) {
        var _a = value || {}, name = _a.name, results = _a.results;
        if (!results) {
            axeResults = null;
            return axeResults;
        }
        if (Object.keys(results).length !== 0) {
            sendUsageEvents(results);
        }
        var devtoolsResults = {
            endTime: results.timestamp,
            findings: results,
            id: name || "".concat(new Date().valueOf()),
            name: axeReportName,
            platform: {},
            testSubject: {
                fileName: results.url
            },
            type: 'axe-devtools-result'
        };
        axeResults = devtoolsResults;
        return axeResults;
    };
    var getAxeResults = function () { return axeResults; };
    var enableTracking = function (state) {
        analytics.enableTracking(state);
        return true;
    };
    var setTrackingUrl = function (url) {
        analytics.url(url);
        return true;
    };
    var setDistinctId = function (id) {
        distinctId = analytics.distinctId(id) || '';
        return true;
    };
    /**
     * Register tasks
     */
    on('task', {
        setAxeCore: setAxeCore,
        getAxeCore: getAxeCore,
        setAxeRuleset: setAxeRuleset,
        setAxeCustom: setAxeCustom,
        setAxeVersion: setAxeVersion,
        logViolations: logViolations,
        setAxeResults: setAxeResults,
        getAxeResults: getAxeResults,
        enableTracking: enableTracking,
        setTrackingUrl: setTrackingUrl,
        setDistinctId: setDistinctId,
        setAxeReportName: setAxeReportName
    });
    /**
     * Helper methods
     */
    /**
     * Send usage metrics
     * @param results {Object}
     */
    function sendUsageEvents(results) {
        var testEngine = results.testEngine, _a = results.violations, violations = _a === void 0 ? [] : _a, _b = results.inapplicable, inapplicable = _b === void 0 ? [] : _b, _c = results.incomplete, incomplete = _c === void 0 ? [] : _c, _d = results.passes, passes = _d === void 0 ? [] : _d;
        var engineVersion = (testEngine === null || testEngine === void 0 ? void 0 : testEngine.version) || axe.version;
        var failedItemCount = violations.reduce(function (acc, cur) { return acc + cur.nodes.length; }, 0);
        var testResults = includeTestResults ? results : {};
        analytics.postEvent({
            event: 'analyze',
            distinctId: distinctId,
            applicationProperties: {
                engineVersion: engineVersion,
                failedRuleCount: violations.length,
                failedRuleNames: violations.map(function (x) { return x.id; }).toString(),
                failedItemCount: failedItemCount,
                inapplicableRuleCount: inapplicable.length,
                incompleteRuleCount: incomplete.length,
                passedRuleCount: passes.length,
                testResults: testResults
            }
        });
    }
}
module.exports = axeDevToolsPlugin;
//# sourceMappingURL=index.js.map