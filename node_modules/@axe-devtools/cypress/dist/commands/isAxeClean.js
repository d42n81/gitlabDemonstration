"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAxeClean = void 0;
var axe_core_1 = __importDefault(require("axe-core"));
var injectIframes_1 = require("../utils/injectIframes");
var injectAxe_1 = require("../utils/injectAxe");
var isAxeClean = function (context, options) {
    (0, injectAxe_1.injectAxe)();
    (0, injectIframes_1.injectIframes)();
    cy.window({ log: false }).then(function (win) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, includedImpacts, axeOptions, results, violations;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = options || {}, includedImpacts = _a.includedImpacts, axeOptions = __rest(_a, ["includedImpacts"]);
                    win.axe.configure({
                        allowedOrigins: ['<unsafe_all_origins>'],
                        branding: { application: 'cypress' }
                    });
                    return [4 /*yield*/, win.axe.run(context || win.document, axeOptions)];
                case 1:
                    results = _b.sent();
                    cy.task('setAxeVersion', results.passes[0].helpUrl || axe_core_1.default.version);
                    violations = includedImpacts
                        ? results.violations.filter(function (v) {
                            return v.impact ? includedImpacts.includes(v.impact) : results.violations;
                        })
                        : results.violations;
                    if (violations.length) {
                        cy.task('logViolations', results);
                        cy.wrap(violations, { log: false }).each(function (v) {
                            var selectors = v.nodes
                                .reduce(function (acc, node) {
                                return acc.concat(node.target);
                            }, [])
                                .join(', ');
                            Cypress.log({
                                $el: Cypress.$(selectors),
                                name: 'a11y error!',
                                consoleProps: function () { return v; },
                                message: [
                                    "".concat(v.id, " on ").concat(v.nodes.length, " Node").concat(v.nodes.length === 1 ? '' : 's')
                                ]
                            });
                        });
                    }
                    cy.wrap(violations, { log: false });
                    assert.equal(violations.length, 0, "".concat(violations.length, " accessibility violation").concat(violations.length === 1 ? '' : 's', " ").concat(violations.length === 1 ? 'was' : 'were', " detected"));
                    return [2 /*return*/];
            }
        });
    }); });
};
exports.isAxeClean = isAxeClean;
//# sourceMappingURL=isAxeClean.js.map