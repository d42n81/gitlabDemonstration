import * as axe from 'axe-core';
export interface AxeDevToolsResults {
    type: 'axe-devtools-result' | 'axe-devtools-mobile-result' | 'attest-result';
    name: string;
    id: string;
    endTime: string;
    platform?: {
        [key: string]: string;
    };
    testSubject?: {
        fileName?: string;
        state?: string;
        lineNum?: number;
    };
    findings: Findings;
    screenshot?: string;
    screenHeight?: number;
    screenWidth?: number;
}
export interface Findings {
    toolOptions?: axe.RunOptions;
    testEngine?: axe.TestEngine;
    testRunner?: axe.TestRunner;
    testEnvironment?: axe.TestEnvironment;
    url?: string;
    appIdentifier?: string;
    screenTitle?: string;
    timestamp: string;
    passes: Result[];
    violations: Result[];
    incomplete: Result[];
    inapplicable: Result[];
}
export interface Result {
    description: string;
    help?: string;
    helpUrl: string;
    id: string;
    impact: axe.ImpactValue;
    tags?: axe.TagValue[];
    nodes: NodeResult[];
}
export interface NodeResult {
    html?: string;
    impact?: axe.ImpactValue;
    target?: string[];
    xpath?: string[];
    ancestry?: string[];
    any: axe.CheckResult[];
    all: axe.CheckResult[];
    none: axe.CheckResult[];
    failureSummary?: string;
    element?: HTMLElement;
    boundsInScreen?: BoundsInScreen;
    mobileProps?: object;
    screenshotIndex?: number;
}
export interface BoundsInScreen {
    bottom: number;
    left: number;
    right: number;
    top: number;
}
export interface MobileScan {
    axeConf: AxeConf;
    axeContext: AxeContext;
    axeRuleResults: MobileResult[];
    username?: string;
    scanName: string;
    tags?: string[];
}
interface AxeConf {
    standards: string[];
    ruleIds: string[];
    rules: {
        impact: number;
        standard: string;
        summary: string;
        ignored: boolean;
    };
    issueFilterConf: {
        onlyShowResultsVisibleToUser: boolean;
    };
}
interface AxeContext {
    axeView: object;
    axeDevice: {
        dpi: number;
        name: string;
        os: string;
        osVersion: string;
        screenHeight: number;
        screenWidth: number;
    };
    screenshot: string;
    axeEventStream: string[];
    axeMetaData: {
        axeVersion: string;
        appIdentifier: string;
        analysisTimestamp: string;
        screenTitle: string;
    };
}
export interface MobileResult {
    axeViewId: string;
    isVisibleToUser?: boolean;
    props: object;
    ruleId: string;
    ruleSummary: string;
    impact: number;
    status: string;
}
export {};
